// This code was autogenerated with `dbus-codegen-rust -s -d org.freedesktop.systemd1 -p /org/freedesktop/systemd1/unit/ssh_2Eservice -i org.freedesktop.systemd1 -f org.freedesktop.systemd1.Service`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait Service {
    fn get_processes(&self) -> Result<Vec<(String, u32, String)>, dbus::Error>;
    fn attach_processes(&self, arg0: &str, arg1: Vec<u32>) -> Result<(), dbus::Error>;
    fn type_(&self) -> Result<String, dbus::Error>;
    fn restart(&self) -> Result<String, dbus::Error>;
    fn pidfile(&self) -> Result<String, dbus::Error>;
    fn notify_access(&self) -> Result<String, dbus::Error>;
    fn restart_usec(&self) -> Result<u64, dbus::Error>;
    fn timeout_start_usec(&self) -> Result<u64, dbus::Error>;
    fn timeout_stop_usec(&self) -> Result<u64, dbus::Error>;
    fn timeout_abort_usec(&self) -> Result<u64, dbus::Error>;
    fn runtime_max_usec(&self) -> Result<u64, dbus::Error>;
    fn watchdog_usec(&self) -> Result<u64, dbus::Error>;
    fn watchdog_timestamp(&self) -> Result<u64, dbus::Error>;
    fn watchdog_timestamp_monotonic(&self) -> Result<u64, dbus::Error>;
    fn root_directory_start_only(&self) -> Result<bool, dbus::Error>;
    fn remain_after_exit(&self) -> Result<bool, dbus::Error>;
    fn guess_main_pid(&self) -> Result<bool, dbus::Error>;
    fn restart_prevent_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error>;
    fn restart_force_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error>;
    fn success_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error>;
    fn main_pid(&self) -> Result<u32, dbus::Error>;
    fn control_pid(&self) -> Result<u32, dbus::Error>;
    fn bus_name(&self) -> Result<String, dbus::Error>;
    fn file_descriptor_store_max(&self) -> Result<u32, dbus::Error>;
    fn nfile_descriptor_store(&self) -> Result<u32, dbus::Error>;
    fn status_text(&self) -> Result<String, dbus::Error>;
    fn status_errno(&self) -> Result<i32, dbus::Error>;
    fn result(&self) -> Result<String, dbus::Error>;
    fn reload_result(&self) -> Result<String, dbus::Error>;
    fn clean_result(&self) -> Result<String, dbus::Error>;
    fn usbfunction_descriptors(&self) -> Result<String, dbus::Error>;
    fn usbfunction_strings(&self) -> Result<String, dbus::Error>;
    fn uid(&self) -> Result<u32, dbus::Error>;
    fn gid(&self) -> Result<u32, dbus::Error>;
    fn nrestarts(&self) -> Result<u32, dbus::Error>;
    fn oompolicy(&self) -> Result<String, dbus::Error>;
    fn exec_main_start_timestamp(&self) -> Result<u64, dbus::Error>;
    fn exec_main_start_timestamp_monotonic(&self) -> Result<u64, dbus::Error>;
    fn exec_main_exit_timestamp(&self) -> Result<u64, dbus::Error>;
    fn exec_main_exit_timestamp_monotonic(&self) -> Result<u64, dbus::Error>;
    fn exec_main_pid(&self) -> Result<u32, dbus::Error>;
    fn exec_main_code(&self) -> Result<i32, dbus::Error>;
    fn exec_main_status(&self) -> Result<i32, dbus::Error>;
    fn exec_condition(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_condition_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start_pre(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start_pre_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start_post(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_start_post_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_reload(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_reload_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_stop(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_stop_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_stop_post(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn exec_stop_post_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error>;
    fn slice(&self) -> Result<String, dbus::Error>;
    fn control_group(&self) -> Result<String, dbus::Error>;
    fn memory_current(&self) -> Result<u64, dbus::Error>;
    fn cpuusage_nsec(&self) -> Result<u64, dbus::Error>;
    fn effective_cpus(&self) -> Result<Vec<u8>, dbus::Error>;
    fn effective_memory_nodes(&self) -> Result<Vec<u8>, dbus::Error>;
    fn tasks_current(&self) -> Result<u64, dbus::Error>;
    fn ipingress_bytes(&self) -> Result<u64, dbus::Error>;
    fn ipingress_packets(&self) -> Result<u64, dbus::Error>;
    fn ipegress_bytes(&self) -> Result<u64, dbus::Error>;
    fn ipegress_packets(&self) -> Result<u64, dbus::Error>;
    fn ioread_bytes(&self) -> Result<u64, dbus::Error>;
    fn ioread_operations(&self) -> Result<u64, dbus::Error>;
    fn iowrite_bytes(&self) -> Result<u64, dbus::Error>;
    fn iowrite_operations(&self) -> Result<u64, dbus::Error>;
    fn delegate(&self) -> Result<bool, dbus::Error>;
    fn delegate_controllers(&self) -> Result<Vec<String>, dbus::Error>;
    fn cpuaccounting(&self) -> Result<bool, dbus::Error>;
    fn cpuweight(&self) -> Result<u64, dbus::Error>;
    fn startup_cpuweight(&self) -> Result<u64, dbus::Error>;
    fn cpushares(&self) -> Result<u64, dbus::Error>;
    fn startup_cpushares(&self) -> Result<u64, dbus::Error>;
    fn cpuquota_per_sec_usec(&self) -> Result<u64, dbus::Error>;
    fn cpuquota_period_usec(&self) -> Result<u64, dbus::Error>;
    fn allowed_cpus(&self) -> Result<Vec<u8>, dbus::Error>;
    fn allowed_memory_nodes(&self) -> Result<Vec<u8>, dbus::Error>;
    fn ioaccounting(&self) -> Result<bool, dbus::Error>;
    fn ioweight(&self) -> Result<u64, dbus::Error>;
    fn startup_ioweight(&self) -> Result<u64, dbus::Error>;
    fn iodevice_weight(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn ioread_bandwidth_max(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn iowrite_bandwidth_max(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn ioread_iopsmax(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn iowrite_iopsmax(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn iodevice_latency_target_usec(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn block_ioaccounting(&self) -> Result<bool, dbus::Error>;
    fn block_ioweight(&self) -> Result<u64, dbus::Error>;
    fn startup_block_ioweight(&self) -> Result<u64, dbus::Error>;
    fn block_iodevice_weight(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn block_ioread_bandwidth(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn block_iowrite_bandwidth(&self) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn memory_accounting(&self) -> Result<bool, dbus::Error>;
    fn default_memory_low(&self) -> Result<u64, dbus::Error>;
    fn default_memory_min(&self) -> Result<u64, dbus::Error>;
    fn memory_min(&self) -> Result<u64, dbus::Error>;
    fn memory_low(&self) -> Result<u64, dbus::Error>;
    fn memory_high(&self) -> Result<u64, dbus::Error>;
    fn memory_max(&self) -> Result<u64, dbus::Error>;
    fn memory_swap_max(&self) -> Result<u64, dbus::Error>;
    fn memory_limit(&self) -> Result<u64, dbus::Error>;
    fn device_policy(&self) -> Result<String, dbus::Error>;
    fn device_allow(&self) -> Result<Vec<(String, String)>, dbus::Error>;
    fn tasks_accounting(&self) -> Result<bool, dbus::Error>;
    fn tasks_max(&self) -> Result<u64, dbus::Error>;
    fn ipaccounting(&self) -> Result<bool, dbus::Error>;
    fn ipaddress_allow(&self) -> Result<Vec<(i32, Vec<u8>, u32)>, dbus::Error>;
    fn ipaddress_deny(&self) -> Result<Vec<(i32, Vec<u8>, u32)>, dbus::Error>;
    fn ipingress_filter_path(&self) -> Result<Vec<String>, dbus::Error>;
    fn ipegress_filter_path(&self) -> Result<Vec<String>, dbus::Error>;
    fn disable_controllers(&self) -> Result<Vec<String>, dbus::Error>;
    fn environment(&self) -> Result<Vec<String>, dbus::Error>;
    fn environment_files(&self) -> Result<Vec<(String, bool)>, dbus::Error>;
    fn pass_environment(&self) -> Result<Vec<String>, dbus::Error>;
    fn unset_environment(&self) -> Result<Vec<String>, dbus::Error>;
    fn umask(&self) -> Result<u32, dbus::Error>;
    fn limit_cpu(&self) -> Result<u64, dbus::Error>;
    fn limit_cpusoft(&self) -> Result<u64, dbus::Error>;
    fn limit_fsize(&self) -> Result<u64, dbus::Error>;
    fn limit_fsizesoft(&self) -> Result<u64, dbus::Error>;
    fn limit_data(&self) -> Result<u64, dbus::Error>;
    fn limit_datasoft(&self) -> Result<u64, dbus::Error>;
    fn limit_stack(&self) -> Result<u64, dbus::Error>;
    fn limit_stacksoft(&self) -> Result<u64, dbus::Error>;
    fn limit_core(&self) -> Result<u64, dbus::Error>;
    fn limit_coresoft(&self) -> Result<u64, dbus::Error>;
    fn limit_rss(&self) -> Result<u64, dbus::Error>;
    fn limit_rsssoft(&self) -> Result<u64, dbus::Error>;
    fn limit_nofile(&self) -> Result<u64, dbus::Error>;
    fn limit_nofilesoft(&self) -> Result<u64, dbus::Error>;
    fn limit_as(&self) -> Result<u64, dbus::Error>;
    fn limit_assoft(&self) -> Result<u64, dbus::Error>;
    fn limit_nproc(&self) -> Result<u64, dbus::Error>;
    fn limit_nprocsoft(&self) -> Result<u64, dbus::Error>;
    fn limit_memlock(&self) -> Result<u64, dbus::Error>;
    fn limit_memlocksoft(&self) -> Result<u64, dbus::Error>;
    fn limit_locks(&self) -> Result<u64, dbus::Error>;
    fn limit_lockssoft(&self) -> Result<u64, dbus::Error>;
    fn limit_sigpending(&self) -> Result<u64, dbus::Error>;
    fn limit_sigpendingsoft(&self) -> Result<u64, dbus::Error>;
    fn limit_msgqueue(&self) -> Result<u64, dbus::Error>;
    fn limit_msgqueuesoft(&self) -> Result<u64, dbus::Error>;
    fn limit_nice(&self) -> Result<u64, dbus::Error>;
    fn limit_nicesoft(&self) -> Result<u64, dbus::Error>;
    fn limit_rtprio(&self) -> Result<u64, dbus::Error>;
    fn limit_rtpriosoft(&self) -> Result<u64, dbus::Error>;
    fn limit_rttime(&self) -> Result<u64, dbus::Error>;
    fn limit_rttimesoft(&self) -> Result<u64, dbus::Error>;
    fn working_directory(&self) -> Result<String, dbus::Error>;
    fn root_directory(&self) -> Result<String, dbus::Error>;
    fn root_image(&self) -> Result<String, dbus::Error>;
    fn oomscore_adjust(&self) -> Result<i32, dbus::Error>;
    fn nice(&self) -> Result<i32, dbus::Error>;
    fn ioscheduling_class(&self) -> Result<i32, dbus::Error>;
    fn ioscheduling_priority(&self) -> Result<i32, dbus::Error>;
    fn cpuscheduling_policy(&self) -> Result<i32, dbus::Error>;
    fn cpuscheduling_priority(&self) -> Result<i32, dbus::Error>;
    fn cpuaffinity(&self) -> Result<Vec<u8>, dbus::Error>;
    fn cpuaffinity_from_numa(&self) -> Result<bool, dbus::Error>;
    fn numapolicy(&self) -> Result<i32, dbus::Error>;
    fn numamask(&self) -> Result<Vec<u8>, dbus::Error>;
    fn timer_slack_nsec(&self) -> Result<u64, dbus::Error>;
    fn cpuscheduling_reset_on_fork(&self) -> Result<bool, dbus::Error>;
    fn non_blocking(&self) -> Result<bool, dbus::Error>;
    fn standard_input(&self) -> Result<String, dbus::Error>;
    fn standard_input_file_descriptor_name(&self) -> Result<String, dbus::Error>;
    fn standard_input_data(&self) -> Result<Vec<u8>, dbus::Error>;
    fn standard_output(&self) -> Result<String, dbus::Error>;
    fn standard_output_file_descriptor_name(&self) -> Result<String, dbus::Error>;
    fn standard_error(&self) -> Result<String, dbus::Error>;
    fn standard_error_file_descriptor_name(&self) -> Result<String, dbus::Error>;
    fn ttypath(&self) -> Result<String, dbus::Error>;
    fn ttyreset(&self) -> Result<bool, dbus::Error>;
    fn ttyvhangup(&self) -> Result<bool, dbus::Error>;
    fn ttyvtdisallocate(&self) -> Result<bool, dbus::Error>;
    fn syslog_priority(&self) -> Result<i32, dbus::Error>;
    fn syslog_identifier(&self) -> Result<String, dbus::Error>;
    fn syslog_level_prefix(&self) -> Result<bool, dbus::Error>;
    fn syslog_level(&self) -> Result<i32, dbus::Error>;
    fn syslog_facility(&self) -> Result<i32, dbus::Error>;
    fn log_level_max(&self) -> Result<i32, dbus::Error>;
    fn log_rate_limit_interval_usec(&self) -> Result<u64, dbus::Error>;
    fn log_rate_limit_burst(&self) -> Result<u32, dbus::Error>;
    fn log_extra_fields(&self) -> Result<Vec<Vec<u8>>, dbus::Error>;
    fn log_namespace(&self) -> Result<String, dbus::Error>;
    fn secure_bits(&self) -> Result<i32, dbus::Error>;
    fn capability_bounding_set(&self) -> Result<u64, dbus::Error>;
    fn ambient_capabilities(&self) -> Result<u64, dbus::Error>;
    fn user(&self) -> Result<String, dbus::Error>;
    fn group(&self) -> Result<String, dbus::Error>;
    fn dynamic_user(&self) -> Result<bool, dbus::Error>;
    fn remove_ipc(&self) -> Result<bool, dbus::Error>;
    fn supplementary_groups(&self) -> Result<Vec<String>, dbus::Error>;
    fn pamname(&self) -> Result<String, dbus::Error>;
    fn read_write_paths(&self) -> Result<Vec<String>, dbus::Error>;
    fn read_only_paths(&self) -> Result<Vec<String>, dbus::Error>;
    fn inaccessible_paths(&self) -> Result<Vec<String>, dbus::Error>;
    fn mount_flags(&self) -> Result<u64, dbus::Error>;
    fn private_tmp(&self) -> Result<bool, dbus::Error>;
    fn private_devices(&self) -> Result<bool, dbus::Error>;
    fn protect_kernel_tunables(&self) -> Result<bool, dbus::Error>;
    fn protect_kernel_modules(&self) -> Result<bool, dbus::Error>;
    fn protect_kernel_logs(&self) -> Result<bool, dbus::Error>;
    fn protect_control_groups(&self) -> Result<bool, dbus::Error>;
    fn private_network(&self) -> Result<bool, dbus::Error>;
    fn private_users(&self) -> Result<bool, dbus::Error>;
    fn private_mounts(&self) -> Result<bool, dbus::Error>;
    fn protect_home(&self) -> Result<String, dbus::Error>;
    fn protect_system(&self) -> Result<String, dbus::Error>;
    fn same_process_group(&self) -> Result<bool, dbus::Error>;
    fn utmp_identifier(&self) -> Result<String, dbus::Error>;
    fn utmp_mode(&self) -> Result<String, dbus::Error>;
    fn selinux_context(&self) -> Result<(bool, String), dbus::Error>;
    fn app_armor_profile(&self) -> Result<(bool, String), dbus::Error>;
    fn smack_process_label(&self) -> Result<(bool, String), dbus::Error>;
    fn ignore_sigpipe(&self) -> Result<bool, dbus::Error>;
    fn no_new_privileges(&self) -> Result<bool, dbus::Error>;
    fn system_call_filter(&self) -> Result<(bool, Vec<String>), dbus::Error>;
    fn system_call_architectures(&self) -> Result<Vec<String>, dbus::Error>;
    fn system_call_error_number(&self) -> Result<i32, dbus::Error>;
    fn personality(&self) -> Result<String, dbus::Error>;
    fn lock_personality(&self) -> Result<bool, dbus::Error>;
    fn restrict_address_families(&self) -> Result<(bool, Vec<String>), dbus::Error>;
    fn runtime_directory_preserve(&self) -> Result<String, dbus::Error>;
    fn runtime_directory_mode(&self) -> Result<u32, dbus::Error>;
    fn runtime_directory(&self) -> Result<Vec<String>, dbus::Error>;
    fn state_directory_mode(&self) -> Result<u32, dbus::Error>;
    fn state_directory(&self) -> Result<Vec<String>, dbus::Error>;
    fn cache_directory_mode(&self) -> Result<u32, dbus::Error>;
    fn cache_directory(&self) -> Result<Vec<String>, dbus::Error>;
    fn logs_directory_mode(&self) -> Result<u32, dbus::Error>;
    fn logs_directory(&self) -> Result<Vec<String>, dbus::Error>;
    fn configuration_directory_mode(&self) -> Result<u32, dbus::Error>;
    fn configuration_directory(&self) -> Result<Vec<String>, dbus::Error>;
    fn timeout_clean_usec(&self) -> Result<u64, dbus::Error>;
    fn memory_deny_write_execute(&self) -> Result<bool, dbus::Error>;
    fn restrict_realtime(&self) -> Result<bool, dbus::Error>;
    fn restrict_suidsgid(&self) -> Result<bool, dbus::Error>;
    fn restrict_namespaces(&self) -> Result<u64, dbus::Error>;
    fn bind_paths(&self) -> Result<Vec<(String, String, bool, u64)>, dbus::Error>;
    fn bind_read_only_paths(&self) -> Result<Vec<(String, String, bool, u64)>, dbus::Error>;
    fn temporary_file_system(&self) -> Result<Vec<(String, String)>, dbus::Error>;
    fn mount_apivfs(&self) -> Result<bool, dbus::Error>;
    fn keyring_mode(&self) -> Result<String, dbus::Error>;
    fn protect_hostname(&self) -> Result<bool, dbus::Error>;
    fn network_namespace_path(&self) -> Result<String, dbus::Error>;
    fn kill_mode(&self) -> Result<String, dbus::Error>;
    fn kill_signal(&self) -> Result<i32, dbus::Error>;
    fn restart_kill_signal(&self) -> Result<i32, dbus::Error>;
    fn final_kill_signal(&self) -> Result<i32, dbus::Error>;
    fn send_sigkill(&self) -> Result<bool, dbus::Error>;
    fn send_sighup(&self) -> Result<bool, dbus::Error>;
    fn watchdog_signal(&self) -> Result<i32, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> Service for blocking::Proxy<'a, C> {

    fn get_processes(&self) -> Result<Vec<(String, u32, String)>, dbus::Error> {
        self.method_call("org.freedesktop.systemd1.Service", "GetProcesses", ())
            .and_then(|r: (Vec<(String, u32, String)>, )| Ok(r.0, ))
    }

    fn attach_processes(&self, arg0: &str, arg1: Vec<u32>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.systemd1.Service", "AttachProcesses", (arg0, arg1, ))
    }

    fn type_(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Type")
    }

    fn restart(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Restart")
    }

    fn pidfile(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PIDFile")
    }

    fn notify_access(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NotifyAccess")
    }

    fn restart_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestartUSec")
    }

    fn timeout_start_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TimeoutStartUSec")
    }

    fn timeout_stop_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TimeoutStopUSec")
    }

    fn timeout_abort_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TimeoutAbortUSec")
    }

    fn runtime_max_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RuntimeMaxUSec")
    }

    fn watchdog_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "WatchdogUSec")
    }

    fn watchdog_timestamp(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "WatchdogTimestamp")
    }

    fn watchdog_timestamp_monotonic(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "WatchdogTimestampMonotonic")
    }

    fn root_directory_start_only(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RootDirectoryStartOnly")
    }

    fn remain_after_exit(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RemainAfterExit")
    }

    fn guess_main_pid(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "GuessMainPID")
    }

    fn restart_prevent_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestartPreventExitStatus")
    }

    fn restart_force_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestartForceExitStatus")
    }

    fn success_exit_status(&self) -> Result<(Vec<i32>, Vec<i32>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SuccessExitStatus")
    }

    fn main_pid(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MainPID")
    }

    fn control_pid(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ControlPID")
    }

    fn bus_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BusName")
    }

    fn file_descriptor_store_max(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "FileDescriptorStoreMax")
    }

    fn nfile_descriptor_store(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NFileDescriptorStore")
    }

    fn status_text(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StatusText")
    }

    fn status_errno(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StatusErrno")
    }

    fn result(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Result")
    }

    fn reload_result(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ReloadResult")
    }

    fn clean_result(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CleanResult")
    }

    fn usbfunction_descriptors(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "USBFunctionDescriptors")
    }

    fn usbfunction_strings(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "USBFunctionStrings")
    }

    fn uid(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "UID")
    }

    fn gid(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "GID")
    }

    fn nrestarts(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NRestarts")
    }

    fn oompolicy(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "OOMPolicy")
    }

    fn exec_main_start_timestamp(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainStartTimestamp")
    }

    fn exec_main_start_timestamp_monotonic(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainStartTimestampMonotonic")
    }

    fn exec_main_exit_timestamp(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainExitTimestamp")
    }

    fn exec_main_exit_timestamp_monotonic(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainExitTimestampMonotonic")
    }

    fn exec_main_pid(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainPID")
    }

    fn exec_main_code(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainCode")
    }

    fn exec_main_status(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecMainStatus")
    }

    fn exec_condition(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecCondition")
    }

    fn exec_condition_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecConditionEx")
    }

    fn exec_start_pre(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStartPre")
    }

    fn exec_start_pre_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStartPreEx")
    }

    fn exec_start(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStart")
    }

    fn exec_start_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStartEx")
    }

    fn exec_start_post(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStartPost")
    }

    fn exec_start_post_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStartPostEx")
    }

    fn exec_reload(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecReload")
    }

    fn exec_reload_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecReloadEx")
    }

    fn exec_stop(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStop")
    }

    fn exec_stop_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStopEx")
    }

    fn exec_stop_post(&self) -> Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStopPost")
    }

    fn exec_stop_post_ex(&self) -> Result<Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ExecStopPostEx")
    }

    fn slice(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Slice")
    }

    fn control_group(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ControlGroup")
    }

    fn memory_current(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryCurrent")
    }

    fn cpuusage_nsec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUUsageNSec")
    }

    fn effective_cpus(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "EffectiveCPUs")
    }

    fn effective_memory_nodes(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "EffectiveMemoryNodes")
    }

    fn tasks_current(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TasksCurrent")
    }

    fn ipingress_bytes(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPIngressBytes")
    }

    fn ipingress_packets(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPIngressPackets")
    }

    fn ipegress_bytes(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPEgressBytes")
    }

    fn ipegress_packets(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPEgressPackets")
    }

    fn ioread_bytes(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOReadBytes")
    }

    fn ioread_operations(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOReadOperations")
    }

    fn iowrite_bytes(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOWriteBytes")
    }

    fn iowrite_operations(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOWriteOperations")
    }

    fn delegate(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Delegate")
    }

    fn delegate_controllers(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DelegateControllers")
    }

    fn cpuaccounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUAccounting")
    }

    fn cpuweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUWeight")
    }

    fn startup_cpuweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StartupCPUWeight")
    }

    fn cpushares(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUShares")
    }

    fn startup_cpushares(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StartupCPUShares")
    }

    fn cpuquota_per_sec_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUQuotaPerSecUSec")
    }

    fn cpuquota_period_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUQuotaPeriodUSec")
    }

    fn allowed_cpus(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "AllowedCPUs")
    }

    fn allowed_memory_nodes(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "AllowedMemoryNodes")
    }

    fn ioaccounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOAccounting")
    }

    fn ioweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOWeight")
    }

    fn startup_ioweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StartupIOWeight")
    }

    fn iodevice_weight(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IODeviceWeight")
    }

    fn ioread_bandwidth_max(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOReadBandwidthMax")
    }

    fn iowrite_bandwidth_max(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOWriteBandwidthMax")
    }

    fn ioread_iopsmax(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOReadIOPSMax")
    }

    fn iowrite_iopsmax(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOWriteIOPSMax")
    }

    fn iodevice_latency_target_usec(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IODeviceLatencyTargetUSec")
    }

    fn block_ioaccounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BlockIOAccounting")
    }

    fn block_ioweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BlockIOWeight")
    }

    fn startup_block_ioweight(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StartupBlockIOWeight")
    }

    fn block_iodevice_weight(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BlockIODeviceWeight")
    }

    fn block_ioread_bandwidth(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BlockIOReadBandwidth")
    }

    fn block_iowrite_bandwidth(&self) -> Result<Vec<(String, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BlockIOWriteBandwidth")
    }

    fn memory_accounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryAccounting")
    }

    fn default_memory_low(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DefaultMemoryLow")
    }

    fn default_memory_min(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DefaultMemoryMin")
    }

    fn memory_min(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryMin")
    }

    fn memory_low(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryLow")
    }

    fn memory_high(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryHigh")
    }

    fn memory_max(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryMax")
    }

    fn memory_swap_max(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemorySwapMax")
    }

    fn memory_limit(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryLimit")
    }

    fn device_policy(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DevicePolicy")
    }

    fn device_allow(&self) -> Result<Vec<(String, String)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DeviceAllow")
    }

    fn tasks_accounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TasksAccounting")
    }

    fn tasks_max(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TasksMax")
    }

    fn ipaccounting(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPAccounting")
    }

    fn ipaddress_allow(&self) -> Result<Vec<(i32, Vec<u8>, u32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPAddressAllow")
    }

    fn ipaddress_deny(&self) -> Result<Vec<(i32, Vec<u8>, u32)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPAddressDeny")
    }

    fn ipingress_filter_path(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPIngressFilterPath")
    }

    fn ipegress_filter_path(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IPEgressFilterPath")
    }

    fn disable_controllers(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DisableControllers")
    }

    fn environment(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Environment")
    }

    fn environment_files(&self) -> Result<Vec<(String, bool)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "EnvironmentFiles")
    }

    fn pass_environment(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PassEnvironment")
    }

    fn unset_environment(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "UnsetEnvironment")
    }

    fn umask(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "UMask")
    }

    fn limit_cpu(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitCPU")
    }

    fn limit_cpusoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitCPUSoft")
    }

    fn limit_fsize(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitFSIZE")
    }

    fn limit_fsizesoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitFSIZESoft")
    }

    fn limit_data(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitDATA")
    }

    fn limit_datasoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitDATASoft")
    }

    fn limit_stack(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitSTACK")
    }

    fn limit_stacksoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitSTACKSoft")
    }

    fn limit_core(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitCORE")
    }

    fn limit_coresoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitCORESoft")
    }

    fn limit_rss(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRSS")
    }

    fn limit_rsssoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRSSSoft")
    }

    fn limit_nofile(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNOFILE")
    }

    fn limit_nofilesoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNOFILESoft")
    }

    fn limit_as(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitAS")
    }

    fn limit_assoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitASSoft")
    }

    fn limit_nproc(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNPROC")
    }

    fn limit_nprocsoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNPROCSoft")
    }

    fn limit_memlock(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitMEMLOCK")
    }

    fn limit_memlocksoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitMEMLOCKSoft")
    }

    fn limit_locks(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitLOCKS")
    }

    fn limit_lockssoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitLOCKSSoft")
    }

    fn limit_sigpending(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitSIGPENDING")
    }

    fn limit_sigpendingsoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitSIGPENDINGSoft")
    }

    fn limit_msgqueue(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitMSGQUEUE")
    }

    fn limit_msgqueuesoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitMSGQUEUESoft")
    }

    fn limit_nice(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNICE")
    }

    fn limit_nicesoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitNICESoft")
    }

    fn limit_rtprio(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRTPRIO")
    }

    fn limit_rtpriosoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRTPRIOSoft")
    }

    fn limit_rttime(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRTTIME")
    }

    fn limit_rttimesoft(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LimitRTTIMESoft")
    }

    fn working_directory(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "WorkingDirectory")
    }

    fn root_directory(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RootDirectory")
    }

    fn root_image(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RootImage")
    }

    fn oomscore_adjust(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "OOMScoreAdjust")
    }

    fn nice(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Nice")
    }

    fn ioscheduling_class(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOSchedulingClass")
    }

    fn ioscheduling_priority(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IOSchedulingPriority")
    }

    fn cpuscheduling_policy(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUSchedulingPolicy")
    }

    fn cpuscheduling_priority(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUSchedulingPriority")
    }

    fn cpuaffinity(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUAffinity")
    }

    fn cpuaffinity_from_numa(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUAffinityFromNUMA")
    }

    fn numapolicy(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NUMAPolicy")
    }

    fn numamask(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NUMAMask")
    }

    fn timer_slack_nsec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TimerSlackNSec")
    }

    fn cpuscheduling_reset_on_fork(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CPUSchedulingResetOnFork")
    }

    fn non_blocking(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NonBlocking")
    }

    fn standard_input(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardInput")
    }

    fn standard_input_file_descriptor_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardInputFileDescriptorName")
    }

    fn standard_input_data(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardInputData")
    }

    fn standard_output(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardOutput")
    }

    fn standard_output_file_descriptor_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardOutputFileDescriptorName")
    }

    fn standard_error(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardError")
    }

    fn standard_error_file_descriptor_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StandardErrorFileDescriptorName")
    }

    fn ttypath(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TTYPath")
    }

    fn ttyreset(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TTYReset")
    }

    fn ttyvhangup(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TTYVHangup")
    }

    fn ttyvtdisallocate(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TTYVTDisallocate")
    }

    fn syslog_priority(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SyslogPriority")
    }

    fn syslog_identifier(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SyslogIdentifier")
    }

    fn syslog_level_prefix(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SyslogLevelPrefix")
    }

    fn syslog_level(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SyslogLevel")
    }

    fn syslog_facility(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SyslogFacility")
    }

    fn log_level_max(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogLevelMax")
    }

    fn log_rate_limit_interval_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogRateLimitIntervalUSec")
    }

    fn log_rate_limit_burst(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogRateLimitBurst")
    }

    fn log_extra_fields(&self) -> Result<Vec<Vec<u8>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogExtraFields")
    }

    fn log_namespace(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogNamespace")
    }

    fn secure_bits(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SecureBits")
    }

    fn capability_bounding_set(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CapabilityBoundingSet")
    }

    fn ambient_capabilities(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "AmbientCapabilities")
    }

    fn user(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "User")
    }

    fn group(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Group")
    }

    fn dynamic_user(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "DynamicUser")
    }

    fn remove_ipc(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RemoveIPC")
    }

    fn supplementary_groups(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SupplementaryGroups")
    }

    fn pamname(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PAMName")
    }

    fn read_write_paths(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ReadWritePaths")
    }

    fn read_only_paths(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ReadOnlyPaths")
    }

    fn inaccessible_paths(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "InaccessiblePaths")
    }

    fn mount_flags(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MountFlags")
    }

    fn private_tmp(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PrivateTmp")
    }

    fn private_devices(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PrivateDevices")
    }

    fn protect_kernel_tunables(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectKernelTunables")
    }

    fn protect_kernel_modules(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectKernelModules")
    }

    fn protect_kernel_logs(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectKernelLogs")
    }

    fn protect_control_groups(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectControlGroups")
    }

    fn private_network(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PrivateNetwork")
    }

    fn private_users(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PrivateUsers")
    }

    fn private_mounts(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "PrivateMounts")
    }

    fn protect_home(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectHome")
    }

    fn protect_system(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectSystem")
    }

    fn same_process_group(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SameProcessGroup")
    }

    fn utmp_identifier(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "UtmpIdentifier")
    }

    fn utmp_mode(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "UtmpMode")
    }

    fn selinux_context(&self) -> Result<(bool, String), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SELinuxContext")
    }

    fn app_armor_profile(&self) -> Result<(bool, String), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "AppArmorProfile")
    }

    fn smack_process_label(&self) -> Result<(bool, String), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SmackProcessLabel")
    }

    fn ignore_sigpipe(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "IgnoreSIGPIPE")
    }

    fn no_new_privileges(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NoNewPrivileges")
    }

    fn system_call_filter(&self) -> Result<(bool, Vec<String>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SystemCallFilter")
    }

    fn system_call_architectures(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SystemCallArchitectures")
    }

    fn system_call_error_number(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SystemCallErrorNumber")
    }

    fn personality(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "Personality")
    }

    fn lock_personality(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LockPersonality")
    }

    fn restrict_address_families(&self) -> Result<(bool, Vec<String>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestrictAddressFamilies")
    }

    fn runtime_directory_preserve(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RuntimeDirectoryPreserve")
    }

    fn runtime_directory_mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RuntimeDirectoryMode")
    }

    fn runtime_directory(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RuntimeDirectory")
    }

    fn state_directory_mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StateDirectoryMode")
    }

    fn state_directory(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "StateDirectory")
    }

    fn cache_directory_mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CacheDirectoryMode")
    }

    fn cache_directory(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "CacheDirectory")
    }

    fn logs_directory_mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogsDirectoryMode")
    }

    fn logs_directory(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "LogsDirectory")
    }

    fn configuration_directory_mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ConfigurationDirectoryMode")
    }

    fn configuration_directory(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ConfigurationDirectory")
    }

    fn timeout_clean_usec(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TimeoutCleanUSec")
    }

    fn memory_deny_write_execute(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MemoryDenyWriteExecute")
    }

    fn restrict_realtime(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestrictRealtime")
    }

    fn restrict_suidsgid(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestrictSUIDSGID")
    }

    fn restrict_namespaces(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestrictNamespaces")
    }

    fn bind_paths(&self) -> Result<Vec<(String, String, bool, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BindPaths")
    }

    fn bind_read_only_paths(&self) -> Result<Vec<(String, String, bool, u64)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "BindReadOnlyPaths")
    }

    fn temporary_file_system(&self) -> Result<Vec<(String, String)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "TemporaryFileSystem")
    }

    fn mount_apivfs(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "MountAPIVFS")
    }

    fn keyring_mode(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "KeyringMode")
    }

    fn protect_hostname(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "ProtectHostname")
    }

    fn network_namespace_path(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "NetworkNamespacePath")
    }

    fn kill_mode(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "KillMode")
    }

    fn kill_signal(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "KillSignal")
    }

    fn restart_kill_signal(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "RestartKillSignal")
    }

    fn final_kill_signal(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "FinalKillSignal")
    }

    fn send_sigkill(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SendSIGKILL")
    }

    fn send_sighup(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "SendSIGHUP")
    }

    fn watchdog_signal(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.systemd1.Service", "WatchdogSignal")
    }
}
