name: $(Build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

# Set global variables
variables:
  crate_name: 'centerdevice-rs'
  rust_minimum_version: 1.39.0
  # cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  macos_image_name: 'macOS-latest'
  linux_image_name: 'ubuntu-18.04'

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master

stages:
  - stage: Check_Build_Test
    displayName: "Check, Build, and Test"
    jobs:
      - job: Fmt
        strategy:
          matrix:
            linux-nightly:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: nightly
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/version_information.yml
          - script: cargo fmt -- --check
            displayName: Run Fmt

      - job: Audit
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - script: cargo install cargo-audit
            displayName: Install Cargo Audit
          - template: templates/version_information.yml
          - script: cargo audit
            displayName: Run Cargo Audit

      - job: Clippy
        strategy:
          matrix:
            mac-stable:
              imageName: ${{ variables.macos_image_name }}
              rustup_toolchain: stable
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: cargo clippy --all --all-features -- -D warnings $(source ".clippy.args")
            displayName: Run Clippy

      - job: 'Build_n_Test'
        displayName: "Build and Test"
        strategy:
          matrix:
            mac-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.macos_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            mac-stable:
               imageName: ${{ variables.macos_image_name }}
               rustup_toolchain: stable
            mac-beta:
               imageName: ${{ variables.macos_image_name }}
               rustup_toolchain: beta
            linux-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
            linux-beta:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: beta
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: cargo build --all --all-features --tests --examples --benches
            displayName: Cargo build
          - script: cargo test --all --all-features --examples
            displayName: Cargo test

  - stage: Publish_Release
    displayName: "Publish Release"
    dependsOn: Check_Build_Test
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    jobs:
      - job: 'Publish_To_GitHub'
        displayName: "Publish to GitHub"
        steps:
          - task: GitHubRelease@0
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: 'lukaspustina-releaseupload'
              repositoryName: '$(Build.Repository.Name)' 
              action: create
              target: '$(Build.SourceVersion)'
              tagSource: 'auto'
              tagPattern: 'v.*'
              tag: $(tagName)
              isDraft: false
              isPreRelease: false
              addChangeLog: true
              compareWith: 'lastFullRelease'
      - job: 'Publish_To_Crates_Io'
        displayName: "Publish to crates.io"
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: stable
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: cargo publish
            displayName: "Cargo publish"
            env:
              CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)

